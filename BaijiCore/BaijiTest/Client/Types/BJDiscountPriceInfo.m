/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
#import "BJDiscountPriceInfo.h"
#import "BJError.h"
#import "BJPriceTreatmentEnum.h"
#import "BJMapExposureEnum.h"
#import "BJAmount.h"

@implementation BJDiscountPriceInfo

+ (BJSchema *)schema {
    static BJSchema *__schema = nil;
    static dispatch_once_t onceToken;
    dispatch_once (&onceToken, ^{
        __schema = [[BJSchema parse:@"{\"type\":\"record\",\"name\":\"BJDiscountPriceInfo\",\"namespace\":\"com.ctrip.soa.framework.soa.testservice.v1\",\"fields\":[{\"name\":\"originalRetailPrice\",\"type\":{\"type\":\"record\",\"name\":\"BJAmount\",\"namespace\":\"com.ctrip.soa.framework.soa.testservice.v1\",\"fields\":[{\"name\":\"value\",\"type\":[\"double\",\"null\"]},{\"name\":\"currencyId\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"minimunAdvertisedPriceExposure\",\"type\":[{\"type\":\"enum\",\"name\":\"BJMapExposureEnum\",\"namespace\":\"com.ctrip.soa.framework.soa.testservice.v1\",\"symbols\":[\"PRE_CHECKOUT\",\"DURING_CHECKOUT\"]},\"null\"]},{\"name\":\"pricingTreatment\",\"type\":[{\"type\":\"enum\",\"name\":\"BJPriceTreatmentEnum\",\"namespace\":\"com.ctrip.soa.framework.soa.testservice.v1\",\"symbols\":[\"STP\",\"MAP\"]},\"null\"]},{\"name\":\"soldOnEbay\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"soldOffEbay\",\"type\":[\"boolean\",\"null\"]}]}"] retain];
    });
    return __schema;
}

- (id)initWithOriginalRetailPrice:(BJAmount *)originalRetailPrice
   minimunAdvertisedPriceExposure:(BJMapExposureEnum *)minimunAdvertisedPriceExposure
                 pricingTreatment:(BJPriceTreatmentEnum *)pricingTreatment
                       soldOnEbay:(NSNumber *)soldOnEbay
                      soldOffEbay:(NSNumber *)soldOffEbay {
    self = [super init];
    if (self) {
        _originalRetailPrice = originalRetailPrice;
        _minimunAdvertisedPriceExposure = minimunAdvertisedPriceExposure;
        _pricingTreatment = pricingTreatment;
        _soldOnEbay = soldOnEbay;
        _soldOffEbay = soldOffEbay;
    }
    return self;
}

- (id)fieldAtIndex:(int)fieldPos {
    switch (fieldPos) {
        case 0: return self.originalRetailPrice;
        case 1: return self.minimunAdvertisedPriceExposure;
        case 2: return self.pricingTreatment;
        case 3: return self.soldOnEbay;
        case 4: return self.soldOffEbay;
        default:
            [NSException exceptionWithName:BJRuntimeException
                                    reason:[NSString stringWithFormat:@"Bad index %d in fieldAtIndex:", fieldPos]
                                  userInfo:nil];
    }
    return nil;
}

- (void)setObject:(id)object atIndex:(int)fieldPos {
    switch (fieldPos) {
        case 0: self.originalRetailPrice = object; break;
        case 1: self.minimunAdvertisedPriceExposure = object; break;
        case 2: self.pricingTreatment = object; break;
        case 3: self.soldOnEbay = object; break;
        case 4: self.soldOffEbay = object; break;
        default:
            [NSException exceptionWithName:BJRuntimeException
                                    reason:[NSString stringWithFormat:@"Bad index %d in setObject:atIndex:", fieldPos]
                                  userInfo:nil];
    }
}


#pragma override NSObject methods

- (BOOL)isEqual:(id)object {
    if (object == nil)
        return NO;
    if ([self class] != [object class])
        return NO;
    BJDiscountPriceInfo *that = (BJDiscountPriceInfo *)object;
    return
    [self.originalRetailPrice isEqual:[that originalRetailPrice]] &&
    [self.minimunAdvertisedPriceExposure isEqual:[that minimunAdvertisedPriceExposure]] &&
    [self.pricingTreatment isEqual:[that pricingTreatment]] &&
    [self.soldOnEbay isEqual:[that soldOnEbay]] &&
    [self.soldOffEbay isEqual:[that soldOffEbay]];
}

- (NSUInteger)hash {
    NSUInteger result = 1;
    
    result = 31 * result + (self.originalRetailPrice == nil ? 0 : [self.originalRetailPrice hash]);
    result = 31 * result + (self.minimunAdvertisedPriceExposure == nil ? 0 : [self.minimunAdvertisedPriceExposure hash]);
    result = 31 * result + (self.pricingTreatment == nil ? 0 : [self.pricingTreatment hash]);
    result = 31 * result + (self.soldOnEbay == nil ? 0 : [self.soldOnEbay hash]);
    result = 31 * result + (self.soldOffEbay == nil ? 0 : [self.soldOffEbay hash]);
    
    return result;
}

- (void)dealloc {
    [self.originalRetailPrice release];
    [self.minimunAdvertisedPriceExposure release];
    [self.pricingTreatment release];
    [self.soldOnEbay release];
    [self.soldOffEbay release];
    [super dealloc];
}

@end
