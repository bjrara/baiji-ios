/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
#import "BJBaseType.h"
#import "BJError.h"
#import "BJTypeConverter.h"

@implementation BJBaseType

- (BJSchema *)schema {
    static BJSchema *__schema = nil;
    static dispatch_once_t onceToken;
    dispatch_once (&onceToken, ^{
        __schema = [[BJSchema parse:@"{\"type\":\"record\",\"name\":\"BJBaseType\",\"namespace\":\"com.ctrip.soa.framework.soa.basetype.v1\",\"fields\":[{\"name\":\"anyUri1\",\"type\":[\"string\",\"null\"]},{\"name\":\"byte1\",\"type\":[\"int\",\"null\"]},{\"name\":\"decimal1\",\"type\":[\"string\",\"null\"]},{\"name\":\"duration1\",\"type\":[\"string\",\"null\"]},{\"name\":\"float1\",\"type\":[\"float\",\"null\"]},{\"name\":\"short1\",\"type\":[\"int\",\"null\"]},{\"name\":\"unsignedByte1\",\"type\":[\"int\",\"null\"]},{\"name\":\"unsignedInt1\",\"type\":[\"long\",\"null\"]},{\"name\":\"unsignedLong1\",\"type\":[\"string\",\"null\"]},{\"name\":\"unsignedShort1\",\"type\":[\"int\",\"null\"]},{\"name\":\"guid1\",\"type\":[\"string\",\"null\"]},{\"name\":\"list1\",\"type\":{\"type\":\"array\",\"items\":[\"string\",\"null\"]}},{\"name\":\"list2\",\"type\":{\"type\":\"array\",\"items\":[\"string\",\"null\"]}}]}"] retain];
    });
    return __schema;
}

- (id)initWithAnyUri1:(NSString *)anyUri1
                byte1:(NSNumber *)byte1
             decimal1:(NSDecimalNumber *)decimal1
            duration1:(NSString *)duration1
               float1:(NSNumber *)float1
               short1:(NSNumber *)short1
        unsignedByte1:(NSNumber *)unsignedByte1
         unsignedInt1:(NSNumber *)unsignedInt1
        unsignedLong1:(NSNumber *)unsignedLong1
       unsignedShort1:(NSNumber *)unsignedShort1
                guid1:(NSString *)guid1
                list1:(NSArray *)list1
                list2:(NSArray *)list2 {
    self = [super init];
    if (self) {
        self.anyUri1 = anyUri1;
        self.byte1 = byte1;
        self.decimal1 = decimal1;
        self.duration1 = duration1;
        self.float1 = float1;
        self.short1 = short1;
        self.unsignedByte1 = unsignedByte1;
        self.unsignedInt1 = unsignedInt1;
        self.unsignedLong1 = unsignedLong1;
        self.unsignedShort1 = unsignedShort1;
        self.guid1 = guid1;
        self.list1 = list1;
        self.list2 = list2;
    }
    return self;
}

- (id)fieldAtIndex:(int)fieldPos {
    switch (fieldPos) {
        case 0: return self.anyUri1;
        case 1: return self.byte1;
        case 2: return [[BJTypeConverter sharedInstance] convert:self.decimal1 from:[NSDecimalNumber class] to:[NSString class]];
        case 3: return self.duration1;
        case 4: return self.float1;
        case 5: return self.short1;
        case 6: return self.unsignedByte1;
        case 7: return self.unsignedInt1;
        case 8: return [[BJTypeConverter sharedInstance] convert:self.unsignedLong1 from:[NSNumber class] to:[NSString class]];
        case 9: return self.unsignedShort1;
        case 10: return self.guid1;
        case 11: return self.list1;
        case 12: return self.list2;
        default:
            [NSException exceptionWithName:BJRuntimeException
                                    reason:[NSString stringWithFormat:@"Bad index %d in fieldAtIndex:", fieldPos]
                                  userInfo:nil];
    }
    return nil;
}

- (void)setObject:(id)object atIndex:(int)fieldPos {
    switch (fieldPos) {
        case 0: self.anyUri1 = object; break;
        case 1: self.byte1 = object; break;
        case 2: self.decimal1 = [[BJTypeConverter sharedInstance] convert:object from:[NSString class] to:[NSDecimalNumber class]]; break;
        case 3: self.duration1 = object; break;
        case 4: self.float1 = object; break;
        case 5: self.short1 = object; break;
        case 6: self.unsignedByte1 = object; break;
        case 7: self.unsignedInt1 = object; break;
        case 8: self.unsignedLong1 = [[BJTypeConverter sharedInstance] convert:object from:[NSString class] to:[NSNumber class]]; break;
        case 9: self.unsignedShort1 = object; break;
        case 10: self.guid1 = object; break;
        case 11: self.list1 = object; break;
        case 12: self.list2 = object; break;
        default:
            [NSException exceptionWithName:BJRuntimeException
                                    reason:[NSString stringWithFormat:@"Bad index %d in setObject:atIndex:", fieldPos]
                                  userInfo:nil];
    }
}


#pragma override NSObject methods

- (BOOL)isEqual:(id)object {
    if (object == nil)
        return NO;
    if ([self class] != [object class])
        return NO;
    BJBaseType *that = (BJBaseType *)object;
    return
    [self.anyUri1 isEqual:[that anyUri1]] &&
    [self.byte1 isEqual:[that byte1]] &&
    [self.decimal1 isEqual:[that decimal1]] &&
    [self.duration1 isEqual:[that duration1]] &&
    [self.float1 isEqual:[that float1]] &&
    [self.short1 isEqual:[that short1]] &&
    [self.unsignedByte1 isEqual:[that unsignedByte1]] &&
    [self.unsignedInt1 isEqual:[that unsignedInt1]] &&
    [self.unsignedLong1 isEqual:[that unsignedLong1]] &&
    [self.unsignedShort1 isEqual:[that unsignedShort1]] &&
    [self.guid1 isEqual:[that guid1]] &&
    [self.list1 isEqual:[that list1]] &&
    [self.list2 isEqual:[that list2]];
}

- (NSUInteger)hash {
    NSUInteger result = 1;
    
    result = 31 * result + (self.anyUri1 == nil ? 0 : [self.anyUri1 hash]);
    result = 31 * result + (self.byte1 == nil ? 0 : [self.byte1 hash]);
    result = 31 * result + (self.decimal1 == nil ? 0 : [self.decimal1 hash]);
    result = 31 * result + (self.duration1 == nil ? 0 : [self.duration1 hash]);
    result = 31 * result + (self.float1 == nil ? 0 : [self.float1 hash]);
    result = 31 * result + (self.short1 == nil ? 0 : [self.short1 hash]);
    result = 31 * result + (self.unsignedByte1 == nil ? 0 : [self.unsignedByte1 hash]);
    result = 31 * result + (self.unsignedInt1 == nil ? 0 : [self.unsignedInt1 hash]);
    result = 31 * result + (self.unsignedLong1 == nil ? 0 : [self.unsignedLong1 hash]);
    result = 31 * result + (self.unsignedShort1 == nil ? 0 : [self.unsignedShort1 hash]);
    result = 31 * result + (self.guid1 == nil ? 0 : [self.guid1 hash]);
    result = 31 * result + (self.list1 == nil ? 0 : [self.list1 hash]);
    result = 31 * result + (self.list2 == nil ? 0 : [self.list2 hash]);
    
    return result;
}

- (void)dealloc {
    [self.anyUri1 release];
    [self.byte1 release];
    [self.decimal1 release];
    [self.duration1 release];
    [self.float1 release];
    [self.short1 release];
    [self.unsignedByte1 release];
    [self.unsignedInt1 release];
    [self.unsignedLong1 release];
    [self.unsignedShort1 release];
    [self.guid1 release];
    [self.list1 release];
    [self.list2 release];
    [super dealloc];
}

@end
