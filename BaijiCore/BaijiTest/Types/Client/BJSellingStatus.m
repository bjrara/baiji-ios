/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
#import "BJSellingStatus.h"
#import "BJError.h"
#import "BJAmount.h"

@implementation BJSellingStatus

- (BJSchema *)schema {
    static BJSchema *__schema = nil;
    static dispatch_once_t onceToken;
    dispatch_once (&onceToken, ^{
        __schema = [[BJSchema parse:@"{\"type\":\"record\",\"name\":\"BJSellingStatus\",\"namespace\":\"com.ctrip.soa.framework.soa.testservice.v1\",\"fields\":[{\"name\":\"currentPrice\",\"type\":{\"type\":\"record\",\"name\":\"BJAmount\",\"namespace\":\"com.ctrip.soa.framework.soa.testservice.v1\",\"fields\":[{\"name\":\"value\",\"type\":[\"double\",\"null\"]},{\"name\":\"currencyId\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"convertedCurrentPrice\",\"type\":\"BJAmount\"},{\"name\":\"bidCount\",\"type\":[\"int\",\"null\"]},{\"name\":\"sellingState\",\"type\":[\"string\",\"null\"]},{\"name\":\"timeLeft\",\"type\":[\"string\",\"null\"]}]}"] retain];
    });
    return __schema;
}

- (id)initWithCurrentPrice:(BJAmount *)currentPrice
     convertedCurrentPrice:(BJAmount *)convertedCurrentPrice
                  bidCount:(NSNumber *)bidCount
              sellingState:(NSString *)sellingState
                  timeLeft:(NSString *)timeLeft {
    self = [super init];
    if (self) {
        self.currentPrice = currentPrice;
        self.convertedCurrentPrice = convertedCurrentPrice;
        self.bidCount = bidCount;
        self.sellingState = sellingState;
        self.timeLeft = timeLeft;
    }
    return self;
}

- (id)fieldAtIndex:(int)fieldPos {
    switch (fieldPos) {
        case 0: return self.currentPrice;
        case 1: return self.convertedCurrentPrice;
        case 2: return self.bidCount;
        case 3: return self.sellingState;
        case 4: return self.timeLeft;
        default:
            [NSException exceptionWithName:BJRuntimeException
                                    reason:[NSString stringWithFormat:@"Bad index %d in fieldAtIndex:", fieldPos]
                                  userInfo:nil];
    }
    return nil;
}

- (void)setObject:(id)object atIndex:(int)fieldPos {
    switch (fieldPos) {
        case 0: self.currentPrice = object; break;
        case 1: self.convertedCurrentPrice = object; break;
        case 2: self.bidCount = object; break;
        case 3: self.sellingState = object; break;
        case 4: self.timeLeft = object; break;
        default:
            [NSException exceptionWithName:BJRuntimeException
                                    reason:[NSString stringWithFormat:@"Bad index %d in setObject:atIndex:", fieldPos]
                                  userInfo:nil];
    }
}


#pragma override NSObject methods

- (BOOL)isEqual:(id)object {
    if (object == nil)
        return NO;
    if ([self class] != [object class])
        return NO;
    BJSellingStatus *that = (BJSellingStatus *)object;
    return
    [self.currentPrice isEqual:[that currentPrice]] &&
    [self.convertedCurrentPrice isEqual:[that convertedCurrentPrice]] &&
    [self.bidCount isEqual:[that bidCount]] &&
    [self.sellingState isEqual:[that sellingState]] &&
    [self.timeLeft isEqual:[that timeLeft]];
}

- (NSUInteger)hash {
    NSUInteger result = 1;
    
    result = 31 * result + (self.currentPrice == nil ? 0 : [self.currentPrice hash]);
    result = 31 * result + (self.convertedCurrentPrice == nil ? 0 : [self.convertedCurrentPrice hash]);
    result = 31 * result + (self.bidCount == nil ? 0 : [self.bidCount hash]);
    result = 31 * result + (self.sellingState == nil ? 0 : [self.sellingState hash]);
    result = 31 * result + (self.timeLeft == nil ? 0 : [self.timeLeft hash]);
    
    return result;
}

- (void)dealloc {
    [self.currentPrice release];
    [self.convertedCurrentPrice release];
    [self.bidCount release];
    [self.sellingState release];
    [self.timeLeft release];
    [super dealloc];
}

@end
