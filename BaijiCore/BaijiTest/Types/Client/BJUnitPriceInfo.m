/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
#import "BJUnitPriceInfo.h"
#import "BJError.h"

@implementation BJUnitPriceInfo

- (BJSchema *)schema {
    static BJSchema *__schema = nil;
    static dispatch_once_t onceToken;
    dispatch_once (&onceToken, ^{
        __schema = [[BJSchema parse:@"{\"type\":\"record\",\"name\":\"BJUnitPriceInfo\",\"namespace\":\"com.ctrip.soa.framework.soa.testservice.v1\",\"fields\":[{\"name\":\"type\",\"type\":[\"string\",\"null\"]},{\"name\":\"quantity\",\"type\":[\"double\",\"null\"]}]}"] retain];
    });
    return __schema;
}

- (id)initWithType:(NSString *)type
          quantity:(NSNumber *)quantity {
    self = [super init];
    if (self) {
        self.type = type;
        self.quantity = quantity;
    }
    return self;
}

- (id)fieldAtIndex:(int)fieldPos {
    switch (fieldPos) {
        case 0: return self.type;
        case 1: return self.quantity;
        default:
            [NSException exceptionWithName:BJRuntimeException
                                    reason:[NSString stringWithFormat:@"Bad index %d in fieldAtIndex:", fieldPos]
                                  userInfo:nil];
    }
    return nil;
}

- (void)setObject:(id)object atIndex:(int)fieldPos {
    switch (fieldPos) {
        case 0: self.type = object; break;
        case 1: self.quantity = object; break;
        default:
            [NSException exceptionWithName:BJRuntimeException
                                    reason:[NSString stringWithFormat:@"Bad index %d in setObject:atIndex:", fieldPos]
                                  userInfo:nil];
    }
}


#pragma override NSObject methods

- (BOOL)isEqual:(id)object {
    if (object == nil)
        return NO;
    if ([self class] != [object class])
        return NO;
    BJUnitPriceInfo *that = (BJUnitPriceInfo *)object;
    return
    [self.type isEqual:[that type]] &&
    [self.quantity isEqual:[that quantity]];
}

- (NSUInteger)hash {
    NSUInteger result = 1;
    
    result = 31 * result + (self.type == nil ? 0 : [self.type hash]);
    result = 31 * result + (self.quantity == nil ? 0 : [self.quantity hash]);
    
    return result;
}

- (void)dealloc {
    [self.type release];
    [self.quantity release];
    [super dealloc];
}

@end
