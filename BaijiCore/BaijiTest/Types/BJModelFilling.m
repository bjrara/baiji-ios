/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
#import "BJModelFilling.h"
#import "BJError.h"
#import "BJModelFilling2.h"
#import "BJEnum1Values.h"

@implementation BJModelFilling

+ (BJSchema *)schema {
    static BJSchema *__schema = nil;
    static dispatch_once_t onceToken;
    dispatch_once (&onceToken, ^{
        __schema = [[BJSchema parse:@"{\"type\":\"record\",\"name\":\"BJModelFilling\",\"namespace\":\"com.ctrip.soa.framework.soa.crosstest.v1\",\"fields\":[{\"name\":\"boolfilling\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"enumfilling\",\"type\":[{\"type\":\"enum\",\"name\":\"BJEnum1Values\",\"namespace\":\"com.ctrip.soa.framework.soa.crosstest.v1\",\"symbols\":[\"BLUE\",\"RED\",\"GREEN\"]},\"null\"]},{\"name\":\"intfilling\",\"type\":[\"int\",\"null\"]},{\"name\":\"modelfilling\",\"type\":{\"type\":\"record\",\"name\":\"BJModelFilling2\",\"namespace\":\"com.ctrip.soa.framework.soa.crosstest.v1\",\"fields\":[{\"name\":\"enumfilling\",\"type\":[{\"type\":\"enum\",\"name\":\"BJEnum2Values\",\"namespace\":\"com.ctrip.soa.framework.soa.crosstest.v1\",\"symbols\":[\"CAR\",\"BIKE\",\"PLANE\"]},\"null\"]},{\"name\":\"listfilling\",\"type\":{\"type\":\"array\",\"items\":[\"string\",\"null\"]}},{\"name\":\"longfilling\",\"type\":[\"long\",\"null\"]},{\"name\":\"stringfilling\",\"type\":[\"string\",\"null\"]}]}},{\"name\":\"stringfilling1\",\"type\":[\"string\",\"null\"]},{\"name\":\"stringfilling2\",\"type\":[\"string\",\"null\"]},{\"name\":\"stringfilling3\",\"type\":[\"string\",\"null\"]},{\"name\":\"stringfilling4\",\"type\":[\"string\",\"null\"]}]}"] retain];
    });
    return __schema;
}

- (id)initWithBoolfilling:(NSNumber *)boolfilling
              enumfilling:(BJEnum1Values *)enumfilling
               intfilling:(NSNumber *)intfilling
             modelfilling:(BJModelFilling2 *)modelfilling
           stringfilling1:(NSString *)stringfilling1
           stringfilling2:(NSString *)stringfilling2
           stringfilling3:(NSString *)stringfilling3
           stringfilling4:(NSString *)stringfilling4 {
    self = [super init];
    if (self) {
        _boolfilling = boolfilling;
        _enumfilling = enumfilling;
        _intfilling = intfilling;
        _modelfilling = modelfilling;
        _stringfilling1 = stringfilling1;
        _stringfilling2 = stringfilling2;
        _stringfilling3 = stringfilling3;
        _stringfilling4 = stringfilling4;
    }
    return self;
}

- (id)fieldAtIndex:(int)fieldPos {
    switch (fieldPos) {
        case 0: return self.boolfilling; break;
        case 1: return self.enumfilling; break;
        case 2: return self.intfilling; break;
        case 3: return self.modelfilling; break;
        case 4: return self.stringfilling1; break;
        case 5: return self.stringfilling2; break;
        case 6: return self.stringfilling3; break;
        case 7: return self.stringfilling4; break;
        default:
            [NSException exceptionWithName:BJRuntimeException
                                    reason:[NSString stringWithFormat:@"Bad index %d in fieldAtIndex:", fieldPos]
                                  userInfo:nil];
    }
    return nil;
}

- (void)setObject:(id)object atIndex:(int)fieldPos {
    switch (fieldPos) {
        case 0: self.boolfilling = object; break;
        case 1: self.enumfilling = object; break;
        case 2: self.intfilling = object; break;
        case 3: self.modelfilling = object; break;
        case 4: self.stringfilling1 = object; break;
        case 5: self.stringfilling2 = object; break;
        case 6: self.stringfilling3 = object; break;
        case 7: self.stringfilling4 = object; break;
        default:
            [NSException exceptionWithName:BJRuntimeException
                                    reason:[NSString stringWithFormat:@"Bad index %d in setObject:atIndex:", fieldPos]
                                  userInfo:nil];
    }
}


#pragma override NSObject methods

- (BOOL)isEqual:(id)object {
    if (object == nil)
        return NO;
    if ([self class] != [object class])
        return NO;
    BJModelFilling *that = (BJModelFilling *)object;
    return
    [self.boolfilling isEqual:[that boolfilling]] &&
    [self.enumfilling isEqual:[that enumfilling]] &&
    [self.intfilling isEqual:[that intfilling]] &&
    [self.modelfilling isEqual:[that modelfilling]] &&
    [self.stringfilling1 isEqual:[that stringfilling1]] &&
    [self.stringfilling2 isEqual:[that stringfilling2]] &&
    [self.stringfilling3 isEqual:[that stringfilling3]] &&
    [self.stringfilling4 isEqual:[that stringfilling4]];
}

- (NSUInteger)hash {
    NSUInteger result = 1;
    
    result = 31 * result + (self.boolfilling == nil ? 0 : [self.boolfilling hash]);
    result = 31 * result + (self.enumfilling == nil ? 0 : [self.enumfilling hash]);
    result = 31 * result + (self.intfilling == nil ? 0 : [self.intfilling hash]);
    result = 31 * result + (self.modelfilling == nil ? 0 : [self.modelfilling hash]);
    result = 31 * result + (self.stringfilling1 == nil ? 0 : [self.stringfilling1 hash]);
    result = 31 * result + (self.stringfilling2 == nil ? 0 : [self.stringfilling2 hash]);
    result = 31 * result + (self.stringfilling3 == nil ? 0 : [self.stringfilling3 hash]);
    result = 31 * result + (self.stringfilling4 == nil ? 0 : [self.stringfilling4 hash]);
    
    return result;
}

- (void)dealloc {
    [self.boolfilling release];
    [self.enumfilling release];
    [self.intfilling release];
    [self.modelfilling release];
    [self.stringfilling1 release];
    [self.stringfilling2 release];
    [self.stringfilling3 release];
    [self.stringfilling4 release];
    [super dealloc];
}

@end
