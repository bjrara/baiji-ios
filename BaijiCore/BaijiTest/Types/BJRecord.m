/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
#import "BJRecord.h"
#import "BJError.h"

@implementation BJRecord

+ (BJSchema *)schema {
    static BJSchema *__schema = nil;
    static dispatch_once_t onceToken;
    dispatch_once (&onceToken, ^{
        __schema = [[BJSchema parse:@"{\"type\":\"record\",\"name\":\"BJRecord\",\"namespace\":\"com.ctrip.soa.framework.soa.crosstest.v1\",\"fields\":[{\"name\":\"sBoolean\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"sInt\",\"type\":[\"int\",\"null\"]},{\"name\":\"sString\",\"type\":[\"string\",\"null\"]}]}"] retain];
    });
    return __schema;
}

- (id)initWithSBoolean:(NSNumber *)sBoolean
                  sInt:(NSNumber *)sInt
               sString:(NSString *)sString {
    self = [super init];
    if (self) {
        _sBoolean = sBoolean;
        _sInt = sInt;
        _sString = sString;
    }
    return self;
}

- (id)fieldAtIndex:(int)fieldPos {
    switch (fieldPos) {
        case 0: return self.sBoolean; break;
        case 1: return self.sInt; break;
        case 2: return self.sString; break;
        default:
            [NSException exceptionWithName:BJRuntimeException
                                    reason:[NSString stringWithFormat:@"Bad index %d in fieldAtIndex:", fieldPos]
                                  userInfo:nil];
    }
    return nil;
}

- (void)setObject:(id)object atIndex:(int)fieldPos {
    switch (fieldPos) {
        case 0: self.sBoolean = object; break;
        case 1: self.sInt = object; break;
        case 2: self.sString = object; break;
        default:
            [NSException exceptionWithName:BJRuntimeException
                                    reason:[NSString stringWithFormat:@"Bad index %d in setObject:atIndex:", fieldPos]
                                  userInfo:nil];
    }
}


#pragma override NSObject methods

- (BOOL)isEqual:(id)object {
    if (object == nil)
        return NO;
    if ([self class] != [object class])
        return NO;
    BJRecord *that = (BJRecord *)object;
    return
    [self.sBoolean isEqual:[that sBoolean]] &&
    [self.sInt isEqual:[that sInt]] &&
    [self.sString isEqual:[that sString]];
}

- (NSUInteger)hash {
    NSUInteger result = 1;
    
    result = 31 * result + (self.sBoolean == nil ? 0 : [self.sBoolean hash]);
    result = 31 * result + (self.sInt == nil ? 0 : [self.sInt hash]);
    result = 31 * result + (self.sString == nil ? 0 : [self.sString hash]);
    
    return result;
}

- (void)dealloc {
    [self.sBoolean release];
    [self.sInt release];
    [self.sString release];
    [super dealloc];
}

@end
