/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
#import "BJMobileRequestHead.h"
#import "BJError.h"
#import "BJExtensionFieldType.h"

@implementation BJMobileRequestHead

- (BJSchema *)schema {
    static BJSchema *__schema = nil;
    static dispatch_once_t onceToken;
    dispatch_once (&onceToken, ^{
        __schema = [[BJSchema parse:@"{\"type\":\"record\",\"name\":\"BJMobileRequestHead\",\"namespace\":\"com.ctrip.soa.mobile.common.types.v1\",\"fields\":[{\"name\":\"syscode\",\"type\":[\"string\",\"null\"]},{\"name\":\"lang\",\"type\":[\"string\",\"null\"]},{\"name\":\"auth\",\"type\":[\"string\",\"null\"]},{\"name\":\"cid\",\"type\":[\"string\",\"null\"]},{\"name\":\"ctok\",\"type\":[\"string\",\"null\"]},{\"name\":\"cver\",\"type\":[\"string\",\"null\"]},{\"name\":\"sid\",\"type\":[\"string\",\"null\"]},{\"name\":\"extension\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"BJExtensionFieldType\",\"namespace\":\"com.ctrip.soa.mobile.common.types.v1\",\"fields\":[{\"name\":\"name\",\"type\":[\"string\",\"null\"]},{\"name\":\"value\",\"type\":[\"string\",\"null\"]}]}}}]}"] retain];
    });
    return __schema;
}

- (id)initWithSyscode:(NSString *)syscode
                 lang:(NSString *)lang
                 auth:(NSString *)auth
                  cid:(NSString *)cid
                 ctok:(NSString *)ctok
                 cver:(NSString *)cver
                  sid:(NSString *)sid
            extension:(NSArray *)extension {
    self = [super init];
    if (self) {
        self.syscode = syscode;
        self.lang = lang;
        self.auth = auth;
        self.cid = cid;
        self.ctok = ctok;
        self.cver = cver;
        self.sid = sid;
        self.extension = extension;
    }
    return self;
}

- (id)fieldAtIndex:(int)fieldPos {
    switch (fieldPos) {
        case 0: return self.syscode;
        case 1: return self.lang;
        case 2: return self.auth;
        case 3: return self.cid;
        case 4: return self.ctok;
        case 5: return self.cver;
        case 6: return self.sid;
        case 7: return self.extension;
        default:
            [NSException exceptionWithName:BJRuntimeException
                                    reason:[NSString stringWithFormat:@"Bad index %d in fieldAtIndex:", fieldPos]
                                  userInfo:nil];
    }
    return nil;
}

- (void)setObject:(id)object atIndex:(int)fieldPos {
    switch (fieldPos) {
        case 0: self.syscode = object; break;
        case 1: self.lang = object; break;
        case 2: self.auth = object; break;
        case 3: self.cid = object; break;
        case 4: self.ctok = object; break;
        case 5: self.cver = object; break;
        case 6: self.sid = object; break;
        case 7: self.extension = object; break;
        default:
            [NSException exceptionWithName:BJRuntimeException
                                    reason:[NSString stringWithFormat:@"Bad index %d in setObject:atIndex:", fieldPos]
                                  userInfo:nil];
    }
}


#pragma override NSObject methods

- (BOOL)isEqual:(id)object {
    if (object == nil)
        return NO;
    if ([self class] != [object class])
        return NO;
    BJMobileRequestHead *that = (BJMobileRequestHead *)object;
    return
    [self.syscode isEqual:[that syscode]] &&
    [self.lang isEqual:[that lang]] &&
    [self.auth isEqual:[that auth]] &&
    [self.cid isEqual:[that cid]] &&
    [self.ctok isEqual:[that ctok]] &&
    [self.cver isEqual:[that cver]] &&
    [self.sid isEqual:[that sid]] &&
    [self.extension isEqual:[that extension]];
}

- (NSUInteger)hash {
    NSUInteger result = 1;
    
    result = 31 * result + (self.syscode == nil ? 0 : [self.syscode hash]);
    result = 31 * result + (self.lang == nil ? 0 : [self.lang hash]);
    result = 31 * result + (self.auth == nil ? 0 : [self.auth hash]);
    result = 31 * result + (self.cid == nil ? 0 : [self.cid hash]);
    result = 31 * result + (self.ctok == nil ? 0 : [self.ctok hash]);
    result = 31 * result + (self.cver == nil ? 0 : [self.cver hash]);
    result = 31 * result + (self.sid == nil ? 0 : [self.sid hash]);
    result = 31 * result + (self.extension == nil ? 0 : [self.extension hash]);
    
    return result;
}

- (void)dealloc {
    [self.syscode release];
    [self.lang release];
    [self.auth release];
    [self.cid release];
    [self.ctok release];
    [self.cver release];
    [self.sid release];
    [self.extension release];
    [super dealloc];
}

@end
