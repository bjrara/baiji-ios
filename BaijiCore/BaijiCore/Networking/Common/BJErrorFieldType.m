/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
#import "BJErrorFieldType.h"
#import "BJError.h"

@implementation BJErrorFieldType

- (BJSchema *)schema {
    static BJSchema *__schema = nil;
    static dispatch_once_t onceToken;
    dispatch_once (&onceToken, ^{
        __schema = [[BJSchema parse:@"{\"type\":\"record\",\"name\":\"BJErrorFieldType\",\"namespace\":\"com.ctrip.soa.common.types.v1\",\"fields\":[{\"name\":\"fieldName\",\"type\":[\"string\",\"null\"]},{\"name\":\"errorCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"message\",\"type\":[\"string\",\"null\"]}]}"] retain];
    });
    return __schema;
}

- (id)initWithFieldName:(NSString *)fieldName
              errorCode:(NSString *)errorCode
                message:(NSString *)message {
    self = [super init];
    if (self) {
        self.fieldName = fieldName;
        self.errorCode = errorCode;
        self.message = message;
    }
    return self;
}

- (id)fieldAtIndex:(int)fieldPos {
    switch (fieldPos) {
        case 0: return self.fieldName;
        case 1: return self.errorCode;
        case 2: return self.message;
        default:
            [NSException exceptionWithName:BJRuntimeException
                                    reason:[NSString stringWithFormat:@"Bad index %d in fieldAtIndex:", fieldPos]
                                  userInfo:nil];
    }
    return nil;
}

- (void)setObject:(id)object atIndex:(int)fieldPos {
    switch (fieldPos) {
        case 0: self.fieldName = object; break;
        case 1: self.errorCode = object; break;
        case 2: self.message = object; break;
        default:
            [NSException exceptionWithName:BJRuntimeException
                                    reason:[NSString stringWithFormat:@"Bad index %d in setObject:atIndex:", fieldPos]
                                  userInfo:nil];
    }
}


#pragma override NSObject methods

- (BOOL)isEqual:(id)object {
    if (object == nil)
        return NO;
    if ([self class] != [object class])
        return NO;
    BJErrorFieldType *that = (BJErrorFieldType *)object;
    return
    [self.fieldName isEqual:[that fieldName]] &&
    [self.errorCode isEqual:[that errorCode]] &&
    [self.message isEqual:[that message]];
}

- (NSUInteger)hash {
    NSUInteger result = 1;
    
    result = 31 * result + (self.fieldName == nil ? 0 : [self.fieldName hash]);
    result = 31 * result + (self.errorCode == nil ? 0 : [self.errorCode hash]);
    result = 31 * result + (self.message == nil ? 0 : [self.message hash]);
    
    return result;
}

- (void)dealloc {
    [self.fieldName release];
    [self.errorCode release];
    [self.message release];
    [super dealloc];
}

@end
